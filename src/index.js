"use strict";
/**
 * index.js - Entry Point
 * @name   Index
 * @module ApplicationRoot
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Constants
 */
var DEFAULT_POSTGRES = 'postgresql://postgres:password123-@localhost/postgres';
/**
 * Includes
 */
// import process from 'node:process';
var pg = require("pg");
var yargs_1 = require("yargs");
//import * as yargs from 'yargs/yargs'; // Correct import for the yargs instance
var helpers_1 = require("yargs/helpers"); // For parsing process.argv
/**
 * Event Handler
 */
/**
 * handle SIGQUIT signals gracefully
 */
// process.on('SIGQUIT', () => {
//   const msg = 'Received SIGQUIT, performing graceful shutdown.';
//   shutdown(-2, msg);
// });
/**
 * Orderly shutdown
 * @function
 * @param {number}} exitcode
 * @param {string} msg
 * @returns {void}
 */
function shutdown(exitcode, msg) {
    if (!isNumber(exitcode)) {
        // process.exitCode = 0;
    }
    if (!isBlank(msg)) {
        console.log(JSON.stringify(msg));
    }
    // process.exit(exitcode);
}
// Utility
/**
 * True if is falsy or just whitespace
 * @name isBlank
 * @function
 * @param {String} str
 * @returns {Boolean} isNullOrWhitespace
 */
function isBlank(text) {
    return !text || /^\s*$/.test(text);
}
/**
 * Tests to see if passed argument is a number
 * @name #isNumber
 * @function
 * @param {*} value
 * @returns {boolean}
 */
function isNumber(value) {
    return typeof value === 'number';
}
//
// Randomizers
//
/**
 * Random number between min,max inclusive
 * Generated by AI
 * @param {number} min
 * @param {number} max
 * @returns {number} - between inclusive
 */
function getRandomNumber(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
/**
 * Get random date between two dates
 * Generated by AI
 * @param {Date} startDate
 * @param {Date} endDate
 * @returns {Date} - Random Date
 */
function getRandomDate(startDate, endDate) {
    // Convert dates to timestamps
    var startTimestamp = startDate.getTime();
    var endTimestamp = endDate.getTime();
    // Calculate the range in milliseconds
    var range = endTimestamp - startTimestamp;
    // Generate a random offset within the range
    var randomOffset = Math.random() * range;
    // Add the offset to the start timestamp
    var randomTimestamp = startTimestamp + randomOffset;
    // Create a new Date object from the random timestamp
    return new Date(randomTimestamp);
}
// ---------------------------------------------
/**
 * Main() Async Entry Point
 */
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var commandlineargs, client, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    commandlineargs = (0, yargs_1.default)((0, helpers_1.hideBin)(process.argv))
                        .option('c', {
                        alias: 'connection',
                        describe: 'connection string, including database',
                        demandOption: false,
                        type: 'string',
                        default: DEFAULT_POSTGRES
                    })
                        .option('s', {
                        alias: 'schema',
                        describe: 'Schema to create enterprise queue in, must be unique',
                        type: 'string',
                        demandOption: true
                    })
                        .parseSync();
                    client = new pg.Client(commandlineargs.connection);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, 4, 6]);
                    return [4 /*yield*/, client.connect()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 3:
                    e_1 = _a.sent();
                    console.log(e_1);
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, client.end()];
                case 5:
                    _a.sent();
                    client = null;
                    return [7 /*endfinally*/];
                case 6: return [2 /*return*/];
            }
        });
    });
}
/**
 * ENTRY POINT
 */
main();
shutdown(0, 'Normal Exit');
