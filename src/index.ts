/**
 * index.js - Entry Point
 * @name   Index
 * @module ApplicationRoot
 */

/**
 * Constants
 */
const DEFAULT_POSTGRES =
  'postgresql://postgres:password123-@localhost/postgres';
const POSTGRES_RESERVED_WORDS = [
  'select',
  'from',
  'where',
  'insert',
  'update',
  'delete',
  'create',
  'alter',
  'drop and',
  'or',
  'not',
  'in',
  'like',
  'between',
  'as all',
  'any',
  'asc',
  'desc',
  'case',
  'cast current_date',
  'current_time',
  'current_timestamp',
  'current_user exists',
  'false',
  'true',
  'null join',
  'inner',
  'left',
  'right',
  'full',
  'outer group by',
  'having',
  'order by union',
  'intersect',
  'except',
  'abort',
  'analyze',
  'binary',
  'cluster',
  'copy do',
  'explain',
  'listen',
  'lock',
  'notify offset',
  'reset',
  'setof',
  'show',
  'unlisten until',
  'vacuum',
  'verbose',
];
/**
 * Includes
 */
import * as pg from 'pg';
import { exit } from 'process';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers'; // For parsing process.argv

/**
 * Orderly shutdown
 * @function
 * @param {number}} exitcode
 * @param {string} msg
 * @returns {void}
 */
function shutdown(exitcode: number, msg: string) {
  if (!isNumber(exitcode)) {
    exitcode = 0;
  }
  if (!isBlank(msg)) {
    console.log(JSON.stringify(msg));
  }

  exit(exitcode);
}

// Utility

/**
 * True if is falsy or just whitespace
 * @name isBlank
 * @function
 * @param {String} str
 * @returns {Boolean} isNullOrWhitespace
 */
function isBlank(text: any) {
  return !text || /^\s*$/.test(text);
}

/**
 * Tests to see if passed argument is a number
 * @name #isNumber
 * @function
 * @param {*} value
 * @returns {boolean}
 */
function isNumber(value: any) {
  return typeof value === 'number';
}

/**
 * Checks for simple postgres identifier names
 * Checks for reserved words
 * Enforces 63 character limit
 * Note: use lower snake case as a best practice
 * @param text {string}
 * @returns {boolean}
 */
function isValidPostgresName(text: string): boolean {
  let flag =
    !text || /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(text) || text.length <= 63;
  if (flag) {
    const t1 = text.trim().toLowerCase();
    flag = !POSTGRES_RESERVED_WORDS.includes(t1);
  }
  return flag;
}

//
// Randomizers
//

/**
 * Random number between min,max inclusive
 * Generated by AI
 * @param {number} min
 * @param {number} max
 * @returns {number} - between inclusive
 */
function getRandomNumber(min: number, max: number): number {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Get random date between two dates
 * Generated by AI
 * @param {Date} startDate
 * @param {Date} endDate
 * @returns {Date} - Random Date
 */
function getRandomDate(startDate: Date, endDate: Date): Date {
  // Convert dates to timestamps
  const startTimestamp = startDate.getTime();
  const endTimestamp = endDate.getTime();

  // Calculate the range in milliseconds
  const range = endTimestamp - startTimestamp;

  // Generate a random offset within the range
  const randomOffset = Math.random() * range;

  // Add the offset to the start timestamp
  const randomTimestamp = startTimestamp + randomOffset;

  // Create a new Date object from the random timestamp
  return new Date(randomTimestamp);
}

// ---------------------------------------------

/**
 * Main() Async Entry Point
 */
async function main() {
  /**
   * Argument parsing
   */
  const commandlineargs = yargs(hideBin(process.argv))
    .option('c', {
      alias: 'connection',
      describe: 'connection string, including database',
      demandOption: false,
      type: 'string',
      default: DEFAULT_POSTGRES,
    })
    .option('s', {
      alias: 'schema',
      describe: 'Schema to create enterprise queue in, must be unique',
      type: 'string',
      demandOption: true,
    })
    .option('r', {
      alias: 'role',
      describe:
        'roles to grant schema and its objects to, if not specified uses user in connection string, if specified and does not exist, role with appropriate permissions created',
      type: 'string',
      demandOption: false,
    })
    .parseSync();

  // see: https://node-postgres.com/apis/client#new-client
  let client = new pg.Client(commandlineargs.connection);

  try {
    await client.connect();
    if (!isValidPostgresName(commandlineargs.s)) {
      throw new Error(
        `Schema:: Invalid Postgres Identifier: ${commandlineargs.s}`,
      );
    }
    if (!isBlank(commandlineargs.r)) {
      if (!isValidPostgresName(commandlineargs.r)) {
        throw new Error(
          `Role:: Invalid Postgres Identifier: ${commandlineargs.r}`,
        );
      }
      // check if role exists, if not create role
    }

    // Create Schema
    // Execute Script Merge
    // Play Script
    // Run Tests
    // Clear out Queue so its ready for use
    // Refer them to CONFIG.md
  } catch (e) {
    console.log(e);
  } finally {
    await client.end();
    client = null;
  }
}

/**
 * ENTRY POINT
 */
main();
shutdown(0, 'Normal Exit');
