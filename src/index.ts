/**
 * index.js - Entry Point
 * @name   Index
 * @module ApplicationRoot
 */

/**
 * Constants
 */
const DEFAULT_POSTGRES = 'postgresql://postgres:password123-@localhost/postgres';

/**
 * Includes
 */

// import process from 'node:process';
import * as pg from 'pg';
import { exit } from 'process';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers'; // For parsing process.argv

/**
 * Orderly shutdown
 * @function
 * @param {number}} exitcode
 * @param {string} msg
 * @returns {void}
 */
function shutdown(exitcode: number, msg: string) {
  if (!isNumber(exitcode)) {
    exitcode = 0;
  }
  if (!isBlank(msg)) {
    console.log(JSON.stringify(msg));
  }

  exit(exitcode);
}

// Utility

/**
 * True if is falsy or just whitespace
 * @name isBlank
 * @function
 * @param {String} str
 * @returns {Boolean} isNullOrWhitespace
 */
function isBlank(text: any) {
  return !text || /^\s*$/.test(text);
}

/**
 * Tests to see if passed argument is a number
 * @name #isNumber
 * @function
 * @param {*} value
 * @returns {boolean}
 */
function isNumber(value: any) {
  return typeof value === 'number';
}

//
// Randomizers
//

/**
 * Random number between min,max inclusive
 * Generated by AI
 * @param {number} min
 * @param {number} max
 * @returns {number} - between inclusive
 */
function getRandomNumber(min: number, max: number): number {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Get random date between two dates
 * Generated by AI
 * @param {Date} startDate
 * @param {Date} endDate
 * @returns {Date} - Random Date
 */
function getRandomDate(startDate: Date, endDate: Date): Date {
  // Convert dates to timestamps
  const startTimestamp = startDate.getTime();
  const endTimestamp = endDate.getTime();

  // Calculate the range in milliseconds
  const range = endTimestamp - startTimestamp;

  // Generate a random offset within the range
  const randomOffset = Math.random() * range;

  // Add the offset to the start timestamp
  const randomTimestamp = startTimestamp + randomOffset;

  // Create a new Date object from the random timestamp
  return new Date(randomTimestamp);
}

// ---------------------------------------------

/**
 * Main() Async Entry Point
 */
async function main() {
  /**
   * Argument parsing
   */
  const commandlineargs = yargs(hideBin(process.argv))
    .option('c', {
      alias: 'connection',
      describe: 'connection string, including database',
      demandOption: false,
      type: 'string',
      default: DEFAULT_POSTGRES
    })
    .option('s', {
      alias: 'schema',
      describe: 'Schema to create enterprise queue in, must be unique',
      type: 'string',
      demandOption: true
    })
    .parseSync();

  // see: https://node-postgres.com/apis/client#new-client
  let client = new pg.Client(commandlineargs.connection);

  try {
    await client.connect();

   
    // TODO
   

  
  } catch (e) {
    console.log(e);
  } finally {
    await client.end();
    client = null;
  }
}

/**
 * ENTRY POINT
 */
main();
shutdown(0, 'Normal Exit');
